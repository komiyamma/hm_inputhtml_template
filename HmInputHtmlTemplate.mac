hidemaruversion "9.25.99";


jsmode "WebView2";

js {
debuginfo(2);
console.log(hidemaru.getJsMode());

if (typeof (idInterval_MyUITemplate) != "undefined") {
    console.log("クリア");
    hidemaru.clearInterval(idInterval_MyUITemplate);
}

class MyUITemplate { // ここのクラス名はマクロファイル名ごとに書き換える

    constructor() {
        debuginfo(2);

        MyUITemplate.strTargetLabel = "RenderInputHtml";
        MyUITemplate.openRenderPane();
    }

    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }

    static openRenderPane() {
        let absoluteUrl = new URL(currentmacrodirectory() + "\\" + "RenderInput.html");
        let idCallBack = hidemaru.getFunctionId(MyUITemplate.onHtmlButtonClick);
        console.log(idCallBack + "\r\n");
        let params = {
          strIDCallBack: idCallBack,
        };
        absoluteUrl.search = new URLSearchParams(params).toString();

        console.log(absoluteUrl.href);

        const json_arg = {
            target: MyUITemplate.strTargetLabel,
            uri: absoluteUrl,
            show: 1,
            place: "leftside",
        };
        
        renderpanecommand(json_arg);
    }

    static checkComplete() {
        console.log("checkComplete");
        try {
        let readyState = renderpanecommand({ target: "RenderInputHtml", get: "readyState" });
        if (readyState == "complete") {
            hidemaru.clearInterval(idInterval_MyUITemplate);
            console.log("complete");
            MyUITemplate.onRenderPaneShown();
        }
        } catch(err) {
            MyUITemplate.outputAlert(err);
        }
    }

    static onRenderPaneShown() {
        console.log("onRenderPaneShown");
        try {
/*
        renderpanecommand({
            target: "RenderInputHtml",
            focus: 1,
        });
*/
        } catch(err) {
            MyUITemplate.outputAlert(err);
        }
    }

	static onHtmlButtonClick(json) {
	    try {
	        console.log("OK3");
	        console.log(idInterval_MyUITemplate); 
	        hidemaru.clearInterval(idInterval_MyUITemplate);
	        renderpanecommand({
	            target: "RenderInputHtml",
	            show: 0,
	        });
	        console.log("OK4");
	        console.log("OK5");
	        let strInputJson = json;
	        console.log(json);
	        hidemaru.postExecMacroMemory( "js {onPostExecute()}" );
	    } catch(err) {
	        MyUITemplate.outputAlert(err);
	    }
	}



}



try {
    idInterval_MyUITemplate = hidemaru.setInterval(MyUITemplate.checkComplete, 300);
    var myUITemplate = new MyUITemplate(); // let ではなく寿命が残るvarである必要がある。
} catch(err) {
}

} // js

/* この２回目のjsmodeは 9.35までは許されない
jsmode "WebView2";

js {
    debuginfo(2);
    console.log(hidemaru.getJsMode());

    function onPostExecute() {
         console.log("OK6");
    }
}
*/