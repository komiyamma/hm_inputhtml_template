hidemaruversion "9.25.99";


jsmode "WebView2";

js {

debuginfo(2);
console.log(hidemaru.getJsMode());
if (typeof (myUITemplate) != "undefined") {
    myUITemplate._destructor();
}
class MyUITemplate {
    static strTargetLabel = "RenderInputHtml";
    static idInterval;
    constructor() {
        MyUITemplate.openRenderPane();
        MyUITemplate.setInterval();
    }
    _destructor() {
        MyUITemplate.clearInterval();
    }
    static setInterval() {
        MyUITemplate.idInterval = hidemaru.setInterval(MyUITemplate.tickCheckComplete, 300);
    }
    static clearInterval() {
        console.log("クリア");
        hidemaru.clearInterval(MyUITemplate.idInterval);
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static openRenderPane() {
        let objUrl = new URL(currentmacrodirectory() + "\\" + "RenderInput.html");
        let idCallBack = hidemaru.getFunctionId(MyUITemplate.onHtmlButtonClick);
        console.log(idCallBack + "\r\n");
        let params = new URLSearchParams();
        params.set("strIDCallBack", String(idCallBack));
        objUrl.search = params.toString();
        const json_arg = {
            target: MyUITemplate.strTargetLabel,
            uri: objUrl.href,
            show: 1,
            place: "leftside",
            initialize: "async",
        };
        renderpanecommand(json_arg);
    }
    static tickCheckComplete() {
        console.log("tickCheckComplete");
        try {
            let readyState = renderpanecommand({ target: MyUITemplate.strTargetLabel, get: "readyState" });
            if (readyState == "complete") {
                MyUITemplate.clearInterval();
                console.log("complete");
                MyUITemplate.onRenderPaneShown();
            }
        }
        catch (err) {
            MyUITemplate.outputAlert(err);
        }
    }
    static onRenderPaneShown() {
        renderpanecommand({
            target: MyUITemplate.strTargetLabel,
            focus: 1,
        });
    }

    static onHtmlButtonClick(json) {
        try {
            MyUITemplate.clearInterval();
            renderpanecommand({
                target: MyUITemplate.strTargetLabel,
                show: 0,
            });
            let strInputJson = json;
            console.log(json);
            hidemaru.postExecMacroMemory("js {onMyPostExecute()}");
        }
        catch (err) {
            MyUITemplate.outputAlert(err);
        }
    }
}
try {
    // let ではなく寿命が残るvarである必要がある。
    var myUITemplate = new MyUITemplate();
}
catch (err) {
    if (typeof (myUITemplate) != "undefined") {
        myUITemplate._destructor();
    }
}

function onMyPostExecute() {
     console.log("OK6");
}


} // js

/* getFunctionIdを利用した場合、同一空間での２回目のjsmodeは 9.19～9.35までは許されない
jsmode "WebView2";

js {
    debuginfo(2);
    console.log(hidemaru.getJsMode());

    function onMyPostExecute() {
         console.log("OK6");
    }
}
*/