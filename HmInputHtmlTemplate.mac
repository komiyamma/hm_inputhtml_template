hidemaruversion "9.25.99";


jsmode "WebView2";

js {
debuginfo(2);


/// <reference path="../types/hm_jsmode.d.ts" />
class UITemplate {
    static strTargetLabel = "";
    static idInitInterval;
    static idUpdateInterval;
    constructor() {
        UITemplate.strTargetLabel = "RenderInputHtml";
        UITemplate.openRenderPane();
        UITemplate.setInitInterval();
        UITemplate.setUpdateInterval();
    }
    _destructor() {
        UITemplate.clearInitInterval();
        UITemplate.clearUpdateInterval();
    }
    static setInitInterval() {
        UITemplate.idInitInterval = hidemaru.setInterval(UITemplate.checkCompleteRenderPane, 300);
    }
    static clearInitInterval() {
        hidemaru.clearInterval(UITemplate.idInitInterval);
    }
    static outputAlert(err) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), err + "\r\n");
    }
    static setUpdateInterval() {
        UITemplate.idUpdateInterval = hidemaru.setInterval(UITemplate.updateRenderPane, 1000);
    }
    static clearUpdateInterval() {
        hidemaru.clearInterval(UITemplate.idUpdateInterval);
    }
    static openRenderPane() {
        let absoluteUrl = new URL(currentmacrodirectory() + "\\" + "RenderInput.html");
        let idCallBack = hidemaru.getFunctionId(UITemplate.onHtmlButtonClick);
        let params = new URLSearchParams();
        params.set("strIDCallBack", String(idCallBack));
        absoluteUrl.search = new URLSearchParams(params).toString();
        console.log(absoluteUrl.href);
        const json_arg = {
            target: UITemplate.strTargetLabel,
            uri: absoluteUrl.href,
            show: 1,
            place: "leftside",
            size: 240,
            initialize: "async",
        };
        renderpanecommand(json_arg);
    }
    static closeRenderPane() {
        const json_arg = {
            target: UITemplate.strTargetLabel,
            show: 0,
        };
        renderpanecommand(json_arg);
    }
    static checkCompleteRenderPane() {
        console.log("checkCompleteRenderPane");
        try {
            let readyState = renderpanecommand({ target: UITemplate.strTargetLabel, get: "readyState" });
            if (readyState == "complete") {
                UITemplate.clearInitInterval();
                UITemplate.onRenderPaneCompleted();
            }
        }
        catch (err) {
            UITemplate.outputAlert(err);
        }
    }
    static onRenderPaneCompleted() {
        console.log("onRenderPaneCompleted");
        try {
            renderpanecommand({
                target: "RenderInputHtml",
                focus: 1,
            });
        }
        catch (err) {
            UITemplate.outputAlert(err);
        }
    }
    static isCloseRenderPane() {
        let isShowNow = renderpanecommand({ target: UITemplate.strTargetLabel, get: "show" });
        if (isShowNow == "0") { // 数値ではなく文字列なので注意...
            return true; // クローズしてたらtrueを返す。
        }
        return false;
    }

    static updateRenderPane() {
        try {
            if (UITemplate.isCloseRenderPane()) {
                UITemplate.clearInitInterval();
                UITemplate.clearUpdateInterval();
            }
        }
        catch (err) {
            UITemplate.outputAlert(err);
        }
    }
    static onHtmlButtonClick(json) {
        try {
            UITemplate.clearInitInterval();
            UITemplate.clearUpdateInterval();
            renderpanecommand({
                target: "RenderInputHtml",
                show: 0,
            });
            let strInputJson = json;
            console.log(json);
            hidemaru.postExecMacroMemory("js {onPostExecute()}");
        }
        catch (err) {
            UITemplate.outputAlert(err);
        }
    }
}
try {
    var objUITemplate = new UITemplate(); // let ではなく寿命が残るvarである必要がある。
}
catch (err) {
    objUITemplate?._destructor();
    UITemplate.outputAlert(err);
}


} // js


jsmode "WebView2";

js {
    debuginfo(2);
    console.log(hidemaru.getJsMode());

    function onPostExecute() {
         console.log("OK6");
    }
}